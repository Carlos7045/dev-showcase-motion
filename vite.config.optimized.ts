/**\n * Vite Configuration - Otimizada para produção\n * Build otimizado com code splitting estratégico\n */\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { componentTagger } from \"lovable-tagger\";\nimport mdx from \"@mdx-js/rollup\";\nimport rehypeHighlight from \"rehype-highlight\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport remarkGfm from \"remark-gfm\";\n\n// Plugins condicionais para produção\nconst productionPlugins = [];\n\n// Tentar importar plugins opcionais\ntry {\n  const { visualizer } = require('rollup-plugin-visualizer');\n  productionPlugins.push(\n    visualizer({\n      filename: 'dist/stats.html',\n      open: false,\n      gzipSize: true,\n      brotliSize: true,\n    })\n  );\n} catch (e) {\n  console.warn('rollup-plugin-visualizer not available');\n}\n\ntry {\n  const { compression } = require('vite-plugin-compression');\n  productionPlugins.push(\n    compression({\n      algorithm: 'gzip',\n      ext: '.gz',\n    }),\n    compression({\n      algorithm: 'brotliCompress',\n      ext: '.br',\n    })\n  );\n} catch (e) {\n  console.warn('vite-plugin-compression not available');\n}\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  server: {\n    host: \"::\",\n    port: 8080,\n    // Otimizações de desenvolvimento\n    hmr: {\n      overlay: true,\n    },\n    // Pre-bundling otimizado\n    warmup: {\n      clientFiles: [\n        './src/main.tsx',\n        './src/App.tsx',\n        './src/pages/Home.tsx',\n        './src/components/atoms/**/*.tsx',\n      ],\n    },\n  },\n  \n  plugins: [\n    mdx({\n      remarkPlugins: [remarkGfm],\n      rehypePlugins: [\n        rehypeHighlight,\n        rehypeSlug,\n        [rehypeAutolinkHeadings, { behavior: 'wrap' }]\n      ],\n    }),\n    react({\n      // Otimizações do SWC\n      jsxImportSource: '@emotion/react',\n      plugins: [\n        // Plugin para otimizar re-renders\n        ['@swc/plugin-emotion', {}],\n      ],\n    }),\n    mode === 'development' && componentTagger(),\n    // Plugins de produção\n    ...(mode === 'production' ? productionPlugins : []),\n  ].filter(Boolean),\n  \n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n    // Otimizar resolução de módulos\n    extensions: ['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json'],\n  },\n  \n  build: {\n    rollupOptions: {\n      output: {\n        // Estratégia de chunking otimizada\n        manualChunks: (id) => {\n          // Vendor chunks por categoria\n          if (id.includes('node_modules')) {\n            // React ecosystem\n            if (id.includes('react') || id.includes('react-dom') || id.includes('react-router')) {\n              return 'react-vendor';\n            }\n            \n            // UI libraries\n            if (id.includes('@radix-ui') || id.includes('lucide-react') || id.includes('class-variance-authority')) {\n              return 'ui-vendor';\n            }\n            \n            // Animation libraries\n            if (id.includes('framer-motion') || id.includes('lottie')) {\n              return 'animation-vendor';\n            }\n            \n            // Data fetching\n            if (id.includes('@tanstack/react-query') || id.includes('axios')) {\n              return 'query-vendor';\n            }\n            \n            // SEO and meta\n            if (id.includes('react-helmet') || id.includes('helmet')) {\n              return 'helmet-vendor';\n            }\n            \n            // Utilities\n            if (id.includes('date-fns') || id.includes('lodash') || id.includes('clsx') || id.includes('tailwind-merge')) {\n              return 'utils-vendor';\n            }\n            \n            // Other vendors\n            return 'vendor';\n          }\n          \n          // Feature-based chunks\n          if (id.includes('/pages/')) {\n            const pageName = id.split('/pages/')[1].split('/')[0].split('.')[0].toLowerCase();\n            return `page-${pageName}`;\n          }\n          \n          if (id.includes('/components/organisms/')) {\n            return 'organisms';\n          }\n          \n          if (id.includes('/components/molecules/')) {\n            return 'molecules';\n          }\n          \n          if (id.includes('/components/atoms/')) {\n            return 'atoms';\n          }\n          \n          if (id.includes('/hooks/')) {\n            return 'hooks';\n          }\n          \n          if (id.includes('/utils/')) {\n            return 'utils';\n          }\n          \n          if (id.includes('/config/')) {\n            return 'config';\n          }\n        },\n        \n        // Otimizar nomes de arquivos\n        entryFileNames: () => {\n          return `assets/[name]-[hash].js`;\n        },\n        \n        chunkFileNames: () => {\n          return `assets/[name]-[hash].js`;\n        },\n        \n        assetFileNames: (assetInfo) => {\n          const info = assetInfo.name?.split('.') || [];\n          const ext = info[info.length - 1];\n          \n          if (/png|jpe?g|svg|gif|tiff|bmp|ico/i.test(ext)) {\n            return `assets/images/[name]-[hash][extname]`;\n          }\n          \n          if (/css/i.test(ext)) {\n            return `assets/styles/[name]-[hash][extname]`;\n          }\n          \n          if (/woff2?|eot|ttf|otf/i.test(ext)) {\n            return `assets/fonts/[name]-[hash][extname]`;\n          }\n          \n          return `assets/[name]-[hash][extname]`;\n        },\n      },\n      \n      // Otimizações de tree-shaking\n      treeshake: {\n        moduleSideEffects: false,\n        propertyReadSideEffects: false,\n        unknownGlobalSideEffects: false,\n      },\n    },\n    \n    // Otimizações de build\n    target: ['es2020', 'edge88', 'firefox78', 'chrome87', 'safari13.1'],\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: mode === 'production',\n        drop_debugger: mode === 'production',\n        pure_funcs: mode === 'production' ? ['console.log', 'console.info', 'console.debug'] : [],\n        passes: 2,\n        unsafe_arrows: true,\n        unsafe_methods: true,\n        unsafe_proto: true,\n      },\n      mangle: {\n        safari10: true,\n        properties: {\n          regex: /^_/,\n        },\n      },\n      format: {\n        comments: false,\n        ecma: 2020,\n      },\n    },\n    \n    // Configurações de chunk e assets\n    chunkSizeWarningLimit: 1000,\n    assetsInlineLimit: 4096,\n    \n    // CSS code splitting\n    cssCodeSplit: true,\n    cssMinify: 'lightningcss',\n    \n    // Source maps apenas em desenvolvimento\n    sourcemap: mode === 'development' ? 'inline' : false,\n    \n    // Reportar tamanho dos chunks\n    reportCompressedSize: true,\n    \n    // Otimizar imports\n    modulePreload: {\n      polyfill: true,\n    },\n    \n    // Configurações de assets\n    assetsDir: 'assets',\n    \n    // Otimizar CSS\n    cssTarget: ['chrome87', 'firefox78', 'safari13.1', 'edge88'],\n  },\n  \n  // Otimizações de desenvolvimento\n  optimizeDeps: {\n    include: [\n      'react',\n      'react-dom',\n      'react-router-dom',\n      '@tanstack/react-query',\n      'framer-motion',\n      'react-helmet-async',\n      'clsx',\n      'tailwind-merge',\n    ],\n    exclude: [\n      // Excluir dependências que devem ser carregadas sob demanda\n      '@mdx-js/rollup',\n    ],\n    // Pre-bundling otimizado\n    esbuildOptions: {\n      target: 'es2020',\n      supported: {\n        'top-level-await': true,\n      },\n    },\n  },\n  \n  // Configurações de CSS\n  css: {\n    devSourcemap: mode === 'development',\n    preprocessorOptions: {\n      scss: {\n        additionalData: `@import \"@/styles/variables.scss\";`,\n      },\n    },\n    // PostCSS otimizado\n    postcss: {\n      plugins: [\n        require('tailwindcss'),\n        require('autoprefixer'),\n        ...(mode === 'production' ? [\n          require('cssnano')({\n            preset: ['default', {\n              discardComments: {\n                removeAll: true,\n              },\n            }],\n          }),\n        ] : []),\n      ],\n    },\n  },\n  \n  // Configurações de preview\n  preview: {\n    port: 4173,\n    host: true,\n    strictPort: true,\n  },\n  \n  // Configurações de worker\n  worker: {\n    format: 'es',\n    plugins: [\n      react(),\n    ],\n  },\n  \n  // Configurações experimentais\n  experimental: {\n    renderBuiltUrl(filename, { hostType }) {\n      if (hostType === 'js') {\n        return { js: `window.__assetsPath(${JSON.stringify(filename)})` };\n      } else {\n        return { relative: true };\n      }\n    },\n  },\n  \n  // Configurações de logging\n  logLevel: mode === 'production' ? 'info' : 'warn',\n  \n  // Configurações de cache\n  cacheDir: 'node_modules/.vite',\n}));"