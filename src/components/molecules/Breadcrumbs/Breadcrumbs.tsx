/**\n * Breadcrumbs - Componente de navegação hierárquica com SEO\n * Inclui structured data para rich snippets\n */\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { cn } from '@/lib/utils';\nimport { useAria } from '@/components/atoms/AriaProvider';\n\n// === INTERFACES ===\nexport interface BreadcrumbItem {\n  /** Texto do breadcrumb */\n  label: string;\n  /** URL de destino */\n  href?: string;\n  /** Se é o item atual */\n  current?: boolean;\n  /** Ícone do item */\n  icon?: React.ReactNode;\n  /** Função de clique customizada */\n  onClick?: () => void;\n}\n\nexport interface BreadcrumbsProps {\n  /** Lista de itens do breadcrumb */\n  items: BreadcrumbItem[];\n  /** Separador customizado */\n  separator?: React.ReactNode;\n  /** Se deve mostrar ícones */\n  showIcons?: boolean;\n  /** Se deve incluir structured data */\n  includeStructuredData?: boolean;\n  /** Classes CSS adicionais */\n  className?: string;\n  /** Componente de link customizado */\n  LinkComponent?: React.ComponentType<any>;\n  /** Tamanho dos breadcrumbs */\n  size?: 'sm' | 'md' | 'lg';\n  /** Variante visual */\n  variant?: 'default' | 'ghost' | 'outline';\n  /** ID para testes */\n  testId?: string;\n}\n\n// === SEPARADOR PADRÃO ===\nconst DefaultSeparator: React.FC = () => (\n  <svg\n    className=\"w-4 h-4 text-muted-foreground\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M9 5l7 7-7 7\"\n    />\n  </svg>\n);\n\n// === COMPONENTE PRINCIPAL ===\nexport const Breadcrumbs: React.FC<BreadcrumbsProps> = ({\n  items,\n  separator = <DefaultSeparator />,\n  showIcons = true,\n  includeStructuredData = true,\n  className,\n  LinkComponent = 'a',\n  size = 'md',\n  variant = 'default',\n  testId,\n}) => {\n  const { generateId } = useAria();\n  const navId = generateId('breadcrumbs');\n\n  // Filtrar itens válidos\n  const validItems = items.filter(item => item.label);\n  \n  if (validItems.length === 0) {\n    return null;\n  }\n\n  // Structured data para SEO\n  const structuredData = includeStructuredData ? {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: validItems.map((item, index) => ({\n      '@type': 'ListItem',\n      position: index + 1,\n      name: item.label,\n      ...(item.href && { item: item.href }),\n    })),\n  } : null;\n\n  // Classes de tamanho\n  const sizeClasses = {\n    sm: 'text-xs',\n    md: 'text-sm',\n    lg: 'text-base',\n  };\n\n  // Classes de variante\n  const variantClasses = {\n    default: '',\n    ghost: 'bg-transparent',\n    outline: 'border border-border rounded-md px-3 py-2',\n  };\n\n  // Classes do container\n  const containerClasses = cn(\n    'breadcrumbs flex items-center space-x-1',\n    sizeClasses[size],\n    variantClasses[variant],\n    className\n  );\n\n  // Renderizar item\n  const renderItem = (item: BreadcrumbItem, index: number) => {\n    const isLast = index === validItems.length - 1;\n    const itemId = generateId(`breadcrumb-item-${index}`);\n\n    const itemClasses = cn(\n      'flex items-center gap-1 transition-colors duration-150',\n      {\n        'text-foreground font-medium': item.current || isLast,\n        'text-muted-foreground hover:text-foreground': !item.current && !isLast,\n        'cursor-default': item.current || isLast,\n        'cursor-pointer': !item.current && !isLast && (item.href || item.onClick),\n      }\n    );\n\n    const content = (\n      <>\n        {/* Ícone */}\n        {showIcons && item.icon && (\n          <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n            {item.icon}\n          </span>\n        )}\n        \n        {/* Label */}\n        <span>{item.label}</span>\n      </>\n    );\n\n    return (\n      <React.Fragment key={itemId}>\n        {/* Item */}\n        <li className=\"flex items-center\">\n          {item.href && !item.current && !isLast ? (\n            <LinkComponent\n              href={item.href}\n              className={itemClasses}\n              onClick={item.onClick}\n              aria-current={item.current ? 'page' : undefined}\n            >\n              {content}\n            </LinkComponent>\n          ) : item.onClick && !item.current && !isLast ? (\n            <button\n              type=\"button\"\n              className={itemClasses}\n              onClick={item.onClick}\n              aria-current={item.current ? 'page' : undefined}\n            >\n              {content}\n            </button>\n          ) : (\n            <span\n              className={itemClasses}\n              aria-current={item.current || isLast ? 'page' : undefined}\n            >\n              {content}\n            </span>\n          )}\n        </li>\n        \n        {/* Separador */}\n        {!isLast && (\n          <li className=\"flex items-center\" aria-hidden=\"true\">\n            {separator}\n          </li>\n        )}\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      {structuredData && (\n        <Helmet>\n          <script type=\"application/ld+json\">\n            {JSON.stringify(structuredData)}\n          </script>\n        </Helmet>\n      )}\n      \n      {/* Breadcrumbs */}\n      <nav\n        id={navId}\n        className={containerClasses}\n        aria-label=\"Navegação hierárquica\"\n        data-testid={testId}\n      >\n        <ol className=\"flex items-center space-x-1 list-none\">\n          {validItems.map(renderItem)}\n        </ol>\n      </nav>\n    </>\n  );\n};\n\n// === HOOK PARA BREADCRUMBS AUTOMÁTICOS ===\nexport const useBreadcrumbs = (pathname: string, routes: Record<string, string> = {}) => {\n  const segments = pathname.split('/').filter(Boolean);\n  \n  const items: BreadcrumbItem[] = [\n    {\n      label: 'Início',\n      href: '/',\n      icon: (\n        <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n        </svg>\n      ),\n    },\n  ];\n  \n  let currentPath = '';\n  \n  segments.forEach((segment, index) => {\n    currentPath += `/${segment}`;\n    const isLast = index === segments.length - 1;\n    \n    // Usar rota customizada ou capitalizar segmento\n    const label = routes[currentPath] || \n                  segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' ');\n    \n    items.push({\n      label,\n      href: isLast ? undefined : currentPath,\n      current: isLast,\n    });\n  });\n  \n  return items;\n};\n\n// === COMPONENTE DE CONVENIÊNCIA ===\nexport const AutoBreadcrumbs: React.FC<{\n  pathname: string;\n  routes?: Record<string, string>;\n  breadcrumbsProps?: Partial<BreadcrumbsProps>;\n}> = ({ pathname, routes = {}, breadcrumbsProps = {} }) => {\n  const items = useBreadcrumbs(pathname, routes);\n  \n  // Não mostrar se só tem o item \"Início\"\n  if (items.length <= 1) {\n    return null;\n  }\n  \n  return <Breadcrumbs items={items} {...breadcrumbsProps} />;\n};\n\n// === BREADCRUMBS ESPECÍFICOS ===\n\n// Breadcrumbs para blog\nexport const BlogBreadcrumbs: React.FC<{\n  category?: string;\n  postTitle?: string;\n  breadcrumbsProps?: Partial<BreadcrumbsProps>;\n}> = ({ category, postTitle, breadcrumbsProps = {} }) => {\n  const items: BreadcrumbItem[] = [\n    {\n      label: 'Início',\n      href: '/',\n      icon: (\n        <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n        </svg>\n      ),\n    },\n    {\n      label: 'Blog',\n      href: '/blog',\n    },\n  ];\n  \n  if (category) {\n    items.push({\n      label: category,\n      href: postTitle ? `/blog/category/${category.toLowerCase()}` : undefined,\n      current: !postTitle,\n    });\n  }\n  \n  if (postTitle) {\n    items.push({\n      label: postTitle,\n      current: true,\n    });\n  }\n  \n  return <Breadcrumbs items={items} {...breadcrumbsProps} />;\n};\n\n// Breadcrumbs para produtos\nexport const ProductBreadcrumbs: React.FC<{\n  category?: string;\n  subcategory?: string;\n  productName?: string;\n  breadcrumbsProps?: Partial<BreadcrumbsProps>;\n}> = ({ category, subcategory, productName, breadcrumbsProps = {} }) => {\n  const items: BreadcrumbItem[] = [\n    {\n      label: 'Início',\n      href: '/',\n      icon: (\n        <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n        </svg>\n      ),\n    },\n    {\n      label: 'Produtos',\n      href: '/produtos',\n    },\n  ];\n  \n  if (category) {\n    items.push({\n      label: category,\n      href: subcategory || productName ? `/produtos/${category.toLowerCase()}` : undefined,\n      current: !subcategory && !productName,\n    });\n  }\n  \n  if (subcategory) {\n    items.push({\n      label: subcategory,\n      href: productName ? `/produtos/${category?.toLowerCase()}/${subcategory.toLowerCase()}` : undefined,\n      current: !productName,\n    });\n  }\n  \n  if (productName) {\n    items.push({\n      label: productName,\n      current: true,\n    });\n  }\n  \n  return <Breadcrumbs items={items} {...breadcrumbsProps} />;\n};\n\nBreadcrumbs.displayName = 'Breadcrumbs';\nAutoBreadcrumbs.displayName = 'AutoBreadcrumbs';\nBlogBreadcrumbs.displayName = 'BlogBreadcrumbs';\nProductBreadcrumbs.displayName = 'ProductBreadcrumbs';\n\nexport default Breadcrumbs;"