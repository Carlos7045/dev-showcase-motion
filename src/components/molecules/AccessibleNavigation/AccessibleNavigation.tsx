/**\n * AccessibleNavigation - Componente de navegação com acessibilidade completa\n * Suporte a teclado, ARIA, screen readers e skip links\n */\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { useKeyboardNavigation, useFocusManagement } from '@/hooks/useAccessibility';\nimport { useAria } from '@/components/atoms/AriaProvider';\nimport { cn } from '@/lib/utils';\n\n// === INTERFACES ===\nexport interface NavigationItem {\n  /** ID único do item */\n  id: string;\n  /** Texto do link */\n  label: string;\n  /** URL de destino */\n  href?: string;\n  /** Função de clique customizada */\n  onClick?: () => void;\n  /** Se o item está ativo */\n  active?: boolean;\n  /** Se o item está desabilitado */\n  disabled?: boolean;\n  /** Ícone do item */\n  icon?: React.ReactNode;\n  /** Badge/contador */\n  badge?: string | number;\n  /** Subitens (dropdown) */\n  children?: NavigationItem[];\n  /** Tecla de atalho */\n  shortcut?: string;\n  /** Descrição para screen readers */\n  description?: string;\n}\n\nexport interface AccessibleNavigationProps {\n  /** Lista de itens de navegação */\n  items: NavigationItem[];\n  /** Orientação da navegação */\n  orientation?: 'horizontal' | 'vertical';\n  /** Se deve mostrar ícones */\n  showIcons?: boolean;\n  /** Se deve mostrar badges */\n  showBadges?: boolean;\n  /** Se deve mostrar atalhos */\n  showShortcuts?: boolean;\n  /** Label para o nav */\n  ariaLabel?: string;\n  /** ID do elemento que descreve a navegação */\n  ariaDescribedBy?: string;\n  /** Classes CSS adicionais */\n  className?: string;\n  /** Callback quando item é selecionado */\n  onItemSelect?: (item: NavigationItem) => void;\n  /** Se deve usar roteamento do React Router */\n  useRouter?: boolean;\n  /** Componente de link customizado */\n  LinkComponent?: React.ComponentType<any>;\n  /** ID para testes */\n  testId?: string;\n}\n\n// === COMPONENTE PRINCIPAL ===\nexport const AccessibleNavigation: React.FC<AccessibleNavigationProps> = ({\n  items,\n  orientation = 'horizontal',\n  showIcons = true,\n  showBadges = true,\n  showShortcuts = false,\n  ariaLabel = 'Navegação principal',\n  ariaDescribedBy,\n  className,\n  onItemSelect,\n  useRouter = false,\n  LinkComponent = 'a',\n  testId,\n}) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  const { generateId } = useAria();\n  \n  // Focus management\n  const {\n    containerRef,\n    focusableElements,\n    focusNext,\n    focusPrevious,\n    focusFirst,\n    focusLast,\n  } = useFocusManagement({\n    focusableSelector: '[role=\"menuitem\"]:not([aria-disabled=\"true\"])',\n  });\n\n  // Navegação por teclado\n  const handleArrowKey = useCallback((direction: 'up' | 'down' | 'left' | 'right') => {\n    if (orientation === 'horizontal') {\n      if (direction === 'left') {\n        focusPrevious();\n      } else if (direction === 'right') {\n        focusNext();\n      }\n    } else {\n      if (direction === 'up') {\n        focusPrevious();\n      } else if (direction === 'down') {\n        focusNext();\n      }\n    }\n  }, [orientation, focusNext, focusPrevious]);\n\n  const handleAction = useCallback(() => {\n    const activeElement = document.activeElement as HTMLElement;\n    if (activeElement) {\n      activeElement.click();\n    }\n  }, []);\n\n  const handleEscape = useCallback(() => {\n    // Fechar todos os dropdowns\n    setExpandedItems(new Set());\n    // Focar primeiro item\n    focusFirst();\n  }, [focusFirst]);\n\n  useKeyboardNavigation({\n    onArrowKey: handleArrowKey,\n    onAction: handleAction,\n    onEscape: handleEscape,\n  });\n\n  // Toggle dropdown\n  const toggleDropdown = useCallback((itemId: string) => {\n    setExpandedItems(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(itemId)) {\n        newSet.delete(itemId);\n      } else {\n        newSet.add(itemId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Handle item click\n  const handleItemClick = useCallback((item: NavigationItem, event: React.MouseEvent) => {\n    if (item.disabled) {\n      event.preventDefault();\n      return;\n    }\n\n    // Se tem filhos, toggle dropdown\n    if (item.children && item.children.length > 0) {\n      event.preventDefault();\n      toggleDropdown(item.id);\n      return;\n    }\n\n    // Callback customizado\n    if (item.onClick) {\n      event.preventDefault();\n      item.onClick();\n    }\n\n    // Callback de seleção\n    onItemSelect?.(item);\n  }, [toggleDropdown, onItemSelect]);\n\n  // Render item\n  const renderItem = useCallback((item: NavigationItem, level: number = 0) => {\n    const hasChildren = item.children && item.children.length > 0;\n    const isExpanded = expandedItems.has(item.id);\n    const itemId = generateId(`nav-item-${item.id}`);\n    const dropdownId = hasChildren ? generateId(`nav-dropdown-${item.id}`) : undefined;\n\n    const itemClasses = cn(\n      // Layout base\n      'flex items-center gap-2 px-3 py-2 text-sm font-medium',\n      'transition-colors duration-150',\n      \n      // Estados visuais\n      {\n        'text-primary bg-primary/10': item.active,\n        'text-foreground hover:bg-accent hover:text-accent-foreground': !item.active && !item.disabled,\n        'text-muted-foreground cursor-not-allowed': item.disabled,\n      },\n      \n      // Focus\n      'focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n      \n      // Nível de indentação\n      {\n        'pl-6': level === 1,\n        'pl-9': level === 2,\n      }\n    );\n\n    const content = (\n      <>\n        {/* Ícone */}\n        {showIcons && item.icon && (\n          <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n            {item.icon}\n          </span>\n        )}\n        \n        {/* Label */}\n        <span className=\"flex-1\">{item.label}</span>\n        \n        {/* Badge */}\n        {showBadges && item.badge && (\n          <span \n            className=\"inline-flex items-center justify-center px-2 py-1 text-xs font-bold bg-primary text-primary-foreground rounded-full\"\n            aria-label={`${item.badge} notificações`}\n          >\n            {item.badge}\n          </span>\n        )}\n        \n        {/* Shortcut */}\n        {showShortcuts && item.shortcut && (\n          <kbd className=\"hidden sm:inline-flex items-center px-1.5 py-0.5 text-xs font-mono bg-muted text-muted-foreground rounded border\">\n            {item.shortcut}\n          </kbd>\n        )}\n        \n        {/* Dropdown indicator */}\n        {hasChildren && (\n          <svg\n            className={cn(\n              'w-4 h-4 transition-transform duration-150',\n              { 'rotate-180': isExpanded }\n            )}\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            aria-hidden=\"true\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M19 9l-7 7-7-7\"\n            />\n          </svg>\n        )}\n      </>\n    );\n\n    const commonProps = {\n      id: itemId,\n      role: 'menuitem',\n      className: itemClasses,\n      'aria-disabled': item.disabled,\n      'aria-current': item.active ? 'page' : undefined,\n      'aria-describedby': item.description ? `${itemId}-desc` : undefined,\n      ...(hasChildren && {\n        'aria-expanded': isExpanded,\n        'aria-haspopup': 'menu',\n        'aria-controls': dropdownId,\n      }),\n      onClick: (event: React.MouseEvent) => handleItemClick(item, event),\n      onKeyDown: (event: React.KeyboardEvent) => {\n        if (hasChildren && (event.key === 'Enter' || event.key === ' ')) {\n          event.preventDefault();\n          toggleDropdown(item.id);\n        }\n      },\n    };\n\n    return (\n      <li key={item.id}>\n        {/* Item principal */}\n        {item.href && !hasChildren ? (\n          <LinkComponent\n            href={item.href}\n            {...commonProps}\n          >\n            {content}\n          </LinkComponent>\n        ) : (\n          <button\n            type=\"button\"\n            {...commonProps}\n          >\n            {content}\n          </button>\n        )}\n        \n        {/* Descrição para screen readers */}\n        {item.description && (\n          <div id={`${itemId}-desc`} className=\"sr-only\">\n            {item.description}\n          </div>\n        )}\n        \n        {/* Dropdown */}\n        {hasChildren && (\n          <ul\n            id={dropdownId}\n            role=\"menu\"\n            className={cn(\n              'overflow-hidden transition-all duration-200',\n              {\n                'max-h-0 opacity-0': !isExpanded,\n                'max-h-96 opacity-100': isExpanded,\n              }\n            )}\n            aria-hidden={!isExpanded}\n          >\n            {item.children!.map(child => renderItem(child, level + 1))}\n          </ul>\n        )}\n      </li>\n    );\n  }, [expandedItems, generateId, showIcons, showBadges, showShortcuts, handleItemClick, toggleDropdown, LinkComponent]);\n\n  // Classes do container\n  const containerClasses = cn(\n    'accessible-navigation',\n    {\n      'flex flex-row': orientation === 'horizontal',\n      'flex flex-col': orientation === 'vertical',\n    },\n    className\n  );\n\n  return (\n    <nav\n      ref={containerRef}\n      className={containerClasses}\n      aria-label={ariaLabel}\n      aria-describedby={ariaDescribedBy}\n      data-testid={testId}\n    >\n      <ul\n        role=\"menubar\"\n        className={cn(\n          'list-none',\n          {\n            'flex flex-row space-x-1': orientation === 'horizontal',\n            'flex flex-col space-y-1': orientation === 'vertical',\n          }\n        )}\n        aria-orientation={orientation}\n      >\n        {items.map(item => renderItem(item))}\n      </ul>\n    </nav>\n  );\n};\n\n// === HOOK PARA ATALHOS DE TECLADO ===\nexport const useNavigationShortcuts = (items: NavigationItem[]) => {\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Verificar se é um atalho de navegação\n      const matchingItem = items.find(item => {\n        if (!item.shortcut) return false;\n        \n        const shortcut = item.shortcut.toLowerCase();\n        const isCtrlPressed = event.ctrlKey || event.metaKey;\n        const isAltPressed = event.altKey;\n        const key = event.key.toLowerCase();\n        \n        // Formato: Ctrl+K, Alt+N, etc.\n        if (shortcut.includes('ctrl+') || shortcut.includes('cmd+')) {\n          const shortcutKey = shortcut.replace(/ctrl\\+|cmd\\+/, '');\n          return isCtrlPressed && key === shortcutKey;\n        }\n        \n        if (shortcut.includes('alt+')) {\n          const shortcutKey = shortcut.replace('alt+', '');\n          return isAltPressed && key === shortcutKey;\n        }\n        \n        return false;\n      });\n      \n      if (matchingItem) {\n        event.preventDefault();\n        \n        if (matchingItem.onClick) {\n          matchingItem.onClick();\n        } else if (matchingItem.href) {\n          window.location.href = matchingItem.href;\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [items]);\n};\n\nAccessibleNavigation.displayName = 'AccessibleNavigation';\n\nexport default AccessibleNavigation;"