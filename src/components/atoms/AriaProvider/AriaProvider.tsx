/**\n * AriaProvider - Provedor de contexto para atributos ARIA\n * Gerencia IDs únicos e atributos ARIA de forma consistente\n */\n\nimport React, { createContext, useContext, useCallback, useRef } from 'react';\n\n// === INTERFACES ===\nexport interface AriaContextValue {\n  /** Gerar ID único para ARIA */\n  generateId: (prefix?: string) => string;\n  /** Criar atributos para combobox */\n  createComboboxAttributes: (options: ComboboxOptions) => Record<string, any>;\n  /** Criar atributos para listbox */\n  createListboxAttributes: (options?: ListboxOptions) => Record<string, any>;\n  /** Criar atributos para option */\n  createOptionAttributes: (options?: OptionOptions) => Record<string, any>;\n  /** Criar atributos para dialog */\n  createDialogAttributes: (options?: DialogOptions) => Record<string, any>;\n  /** Criar atributos para button */\n  createButtonAttributes: (options?: ButtonOptions) => Record<string, any>;\n  /** Criar atributos para form field */\n  createFieldAttributes: (options: FieldOptions) => Record<string, any>;\n  /** Criar atributos para tooltip */\n  createTooltipAttributes: (options: TooltipOptions) => Record<string, any>;\n  /** Criar atributos para tab */\n  createTabAttributes: (options: TabOptions) => Record<string, any>;\n  /** Criar atributos para tabpanel */\n  createTabPanelAttributes: (options: TabPanelOptions) => Record<string, any>;\n}\n\nexport interface ComboboxOptions {\n  isExpanded: boolean;\n  hasPopup?: boolean;\n  controls?: string;\n  activeDescendant?: string;\n  autocomplete?: 'none' | 'inline' | 'list' | 'both';\n}\n\nexport interface ListboxOptions {\n  multiselectable?: boolean;\n  orientation?: 'vertical' | 'horizontal';\n  labelledBy?: string;\n  describedBy?: string;\n}\n\nexport interface OptionOptions {\n  selected?: boolean;\n  disabled?: boolean;\n  setSize?: number;\n  posInSet?: number;\n}\n\nexport interface DialogOptions {\n  labelledBy?: string;\n  describedBy?: string;\n  modal?: boolean;\n}\n\nexport interface ButtonOptions {\n  pressed?: boolean;\n  expanded?: boolean;\n  controls?: string;\n  describedBy?: string;\n  disabled?: boolean;\n  hasPopup?: boolean | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n}\n\nexport interface FieldOptions {\n  label: string;\n  description?: string;\n  error?: string;\n  required?: boolean;\n  invalid?: boolean;\n}\n\nexport interface TooltipOptions {\n  content: string;\n  triggerId: string;\n}\n\nexport interface TabOptions {\n  selected?: boolean;\n  controls?: string;\n  setSize?: number;\n  posInSet?: number;\n}\n\nexport interface TabPanelOptions {\n  labelledBy?: string;\n  hidden?: boolean;\n}\n\n// === CONTEXTO ===\nconst AriaContext = createContext<AriaContextValue | null>(null);\n\n// === PROVIDER ===\nexport const AriaProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const idCounterRef = useRef(0);\n  const generatedIdsRef = useRef(new Set<string>());\n\n  // Gerar ID único\n  const generateId = useCallback((prefix: string = 'aria') => {\n    let id: string;\n    do {\n      idCounterRef.current += 1;\n      id = `${prefix}-${idCounterRef.current}`;\n    } while (generatedIdsRef.current.has(id) || document.getElementById(id));\n    \n    generatedIdsRef.current.add(id);\n    return id;\n  }, []);\n\n  // Criar atributos para combobox\n  const createComboboxAttributes = useCallback(({\n    isExpanded,\n    hasPopup = true,\n    controls,\n    activeDescendant,\n    autocomplete = 'list',\n  }: ComboboxOptions) => {\n    return {\n      role: 'combobox',\n      'aria-expanded': isExpanded,\n      'aria-haspopup': hasPopup,\n      'aria-autocomplete': autocomplete,\n      ...(controls && { 'aria-controls': controls }),\n      ...(activeDescendant && { 'aria-activedescendant': activeDescendant }),\n    };\n  }, []);\n\n  // Criar atributos para listbox\n  const createListboxAttributes = useCallback(({\n    multiselectable = false,\n    orientation = 'vertical',\n    labelledBy,\n    describedBy,\n  }: ListboxOptions = {}) => {\n    return {\n      role: 'listbox',\n      'aria-multiselectable': multiselectable,\n      'aria-orientation': orientation,\n      ...(labelledBy && { 'aria-labelledby': labelledBy }),\n      ...(describedBy && { 'aria-describedby': describedBy }),\n    };\n  }, []);\n\n  // Criar atributos para option\n  const createOptionAttributes = useCallback(({\n    selected = false,\n    disabled = false,\n    setSize,\n    posInSet,\n  }: OptionOptions = {}) => {\n    return {\n      role: 'option',\n      'aria-selected': selected,\n      'aria-disabled': disabled,\n      ...(setSize && { 'aria-setsize': setSize }),\n      ...(posInSet && { 'aria-posinset': posInSet }),\n    };\n  }, []);\n\n  // Criar atributos para dialog\n  const createDialogAttributes = useCallback(({\n    labelledBy,\n    describedBy,\n    modal = true,\n  }: DialogOptions = {}) => {\n    return {\n      role: 'dialog',\n      'aria-modal': modal,\n      ...(labelledBy && { 'aria-labelledby': labelledBy }),\n      ...(describedBy && { 'aria-describedby': describedBy }),\n    };\n  }, []);\n\n  // Criar atributos para button\n  const createButtonAttributes = useCallback(({\n    pressed,\n    expanded,\n    controls,\n    describedBy,\n    disabled = false,\n    hasPopup,\n  }: ButtonOptions = {}) => {\n    return {\n      type: 'button' as const,\n      'aria-disabled': disabled,\n      ...(pressed !== undefined && { 'aria-pressed': pressed }),\n      ...(expanded !== undefined && { 'aria-expanded': expanded }),\n      ...(controls && { 'aria-controls': controls }),\n      ...(describedBy && { 'aria-describedby': describedBy }),\n      ...(hasPopup && { 'aria-haspopup': hasPopup }),\n    };\n  }, []);\n\n  // Criar atributos para form field\n  const createFieldAttributes = useCallback(({\n    label,\n    description,\n    error,\n    required = false,\n    invalid = false,\n  }: FieldOptions) => {\n    const labelId = generateId('label');\n    const descriptionId = description ? generateId('description') : undefined;\n    const errorId = error ? generateId('error') : undefined;\n    \n    const describedByIds = [descriptionId, errorId].filter(Boolean);\n    \n    return {\n      field: {\n        'aria-labelledby': labelId,\n        'aria-required': required,\n        'aria-invalid': invalid,\n        ...(describedByIds.length > 0 && { 'aria-describedby': describedByIds.join(' ') }),\n      },\n      label: {\n        id: labelId,\n      },\n      description: descriptionId ? {\n        id: descriptionId,\n      } : undefined,\n      error: errorId ? {\n        id: errorId,\n        role: 'alert',\n        'aria-live': 'polite' as const,\n      } : undefined,\n    };\n  }, [generateId]);\n\n  // Criar atributos para tooltip\n  const createTooltipAttributes = useCallback(({\n    content,\n    triggerId,\n  }: TooltipOptions) => {\n    const tooltipId = generateId('tooltip');\n    \n    return {\n      trigger: {\n        'aria-describedby': tooltipId,\n      },\n      tooltip: {\n        id: tooltipId,\n        role: 'tooltip',\n        'aria-hidden': false,\n      },\n    };\n  }, [generateId]);\n\n  // Criar atributos para tab\n  const createTabAttributes = useCallback(({\n    selected = false,\n    controls,\n    setSize,\n    posInSet,\n  }: TabOptions) => {\n    return {\n      role: 'tab',\n      'aria-selected': selected,\n      tabIndex: selected ? 0 : -1,\n      ...(controls && { 'aria-controls': controls }),\n      ...(setSize && { 'aria-setsize': setSize }),\n      ...(posInSet && { 'aria-posinset': posInSet }),\n    };\n  }, []);\n\n  // Criar atributos para tabpanel\n  const createTabPanelAttributes = useCallback(({\n    labelledBy,\n    hidden = false,\n  }: TabPanelOptions) => {\n    return {\n      role: 'tabpanel',\n      tabIndex: 0,\n      'aria-hidden': hidden,\n      ...(labelledBy && { 'aria-labelledby': labelledBy }),\n    };\n  }, []);\n\n  const value: AriaContextValue = {\n    generateId,\n    createComboboxAttributes,\n    createListboxAttributes,\n    createOptionAttributes,\n    createDialogAttributes,\n    createButtonAttributes,\n    createFieldAttributes,\n    createTooltipAttributes,\n    createTabAttributes,\n    createTabPanelAttributes,\n  };\n\n  return (\n    <AriaContext.Provider value={value}>\n      {children}\n    </AriaContext.Provider>\n  );\n};\n\n// === HOOK ===\nexport const useAria = (): AriaContextValue => {\n  const context = useContext(AriaContext);\n  \n  if (!context) {\n    throw new Error('useAria must be used within an AriaProvider');\n  }\n  \n  return context;\n};\n\n// === HOOKS DE CONVENIÊNCIA ===\n\n// Hook para form field\nexport const useAriaField = (options: FieldOptions) => {\n  const { createFieldAttributes } = useAria();\n  return createFieldAttributes(options);\n};\n\n// Hook para combobox\nexport const useAriaCombobox = (options: ComboboxOptions) => {\n  const { createComboboxAttributes } = useAria();\n  return createComboboxAttributes(options);\n};\n\n// Hook para listbox\nexport const useAriaListbox = (options?: ListboxOptions) => {\n  const { createListboxAttributes } = useAria();\n  return createListboxAttributes(options);\n};\n\n// Hook para dialog\nexport const useAriaDialog = (options?: DialogOptions) => {\n  const { createDialogAttributes } = useAria();\n  return createDialogAttributes(options);\n};\n\n// Hook para button\nexport const useAriaButton = (options?: ButtonOptions) => {\n  const { createButtonAttributes } = useAria();\n  return createButtonAttributes(options);\n};\n\n// Hook para tooltip\nexport const useAriaTooltip = (content: string, triggerId: string) => {\n  const { createTooltipAttributes } = useAria();\n  return createTooltipAttributes({ content, triggerId });\n};\n\n// Hook para tabs\nexport const useAriaTabs = (tabsCount: number) => {\n  const { createTabAttributes, createTabPanelAttributes, generateId } = useAria();\n  \n  const tabsId = generateId('tabs');\n  const tabListId = generateId('tablist');\n  \n  const createTab = (index: number, selected: boolean, panelId: string) => {\n    return createTabAttributes({\n      selected,\n      controls: panelId,\n      setSize: tabsCount,\n      posInSet: index + 1,\n    });\n  };\n  \n  const createTabPanel = (tabId: string, hidden: boolean) => {\n    return createTabPanelAttributes({\n      labelledBy: tabId,\n      hidden,\n    });\n  };\n  \n  return {\n    tabsId,\n    tabListId,\n    createTab,\n    createTabPanel,\n    tabListAttributes: {\n      role: 'tablist',\n      id: tabListId,\n    },\n  };\n};\n\n// === COMPONENTES DE CONVENIÊNCIA ===\n\n// Componente para anúncios de screen reader\nexport const AriaLiveRegion: React.FC<{\n  children: React.ReactNode;\n  politeness?: 'polite' | 'assertive';\n  atomic?: boolean;\n  className?: string;\n}> = ({ children, politeness = 'polite', atomic = false, className }) => {\n  return (\n    <div\n      aria-live={politeness}\n      aria-atomic={atomic}\n      className={className || 'sr-only'}\n      role=\"status\"\n    >\n      {children}\n    </div>\n  );\n};\n\n// Componente para texto apenas para screen readers\nexport const ScreenReaderOnly: React.FC<{\n  children: React.ReactNode;\n  as?: keyof JSX.IntrinsicElements;\n}> = ({ children, as: Component = 'span' }) => {\n  return (\n    <Component className=\"sr-only\">\n      {children}\n    </Component>\n  );\n};\n\n// Componente para landmarks\nexport const AriaLandmark: React.FC<{\n  children: React.ReactNode;\n  role: 'banner' | 'navigation' | 'main' | 'complementary' | 'contentinfo' | 'search' | 'form';\n  label?: string;\n  labelledBy?: string;\n  className?: string;\n  as?: keyof JSX.IntrinsicElements;\n}> = ({ children, role, label, labelledBy, className, as: Component = 'div' }) => {\n  return (\n    <Component\n      role={role}\n      className={className}\n      {...(label && { 'aria-label': label })}\n      {...(labelledBy && { 'aria-labelledby': labelledBy })}\n    >\n      {children}\n    </Component>\n  );\n};\n\nAriaProvider.displayName = 'AriaProvider';\nAriaLiveRegion.displayName = 'AriaLiveRegion';\nScreenReaderOnly.displayName = 'ScreenReaderOnly';\nAriaLandmark.displayName = 'AriaLandmark';\n\nexport default AriaProvider;"