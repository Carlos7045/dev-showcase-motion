/**\n * SEOHead - Componente para gerenciamento de SEO e meta tags\n * Otimização para motores de busca, Open Graph e Twitter Cards\n */\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { SEO_CONFIG } from '@/config/seo';\n\n// === INTERFACES ===\nexport interface SEOProps {\n  /** Título da página */\n  title?: string;\n  /** Descrição da página */\n  description?: string;\n  /** Palavras-chave */\n  keywords?: string[];\n  /** URL canônica */\n  canonical?: string;\n  /** Imagem para compartilhamento */\n  image?: string;\n  /** Tipo de conteúdo Open Graph */\n  type?: 'website' | 'article' | 'profile' | 'book' | 'music' | 'video';\n  /** Data de publicação (para artigos) */\n  publishedTime?: string;\n  /** Data de modificação */\n  modifiedTime?: string;\n  /** Autor do conteúdo */\n  author?: string;\n  /** Seção/categoria */\n  section?: string;\n  /** Tags do artigo */\n  tags?: string[];\n  /** Idioma da página */\n  locale?: string;\n  /** URLs alternativas para outros idiomas */\n  alternateLocales?: Array<{ locale: string; url: string }>;\n  /** Se deve indexar a página */\n  noIndex?: boolean;\n  /** Se deve seguir links */\n  noFollow?: boolean;\n  /** Schema.org structured data */\n  structuredData?: Record<string, any>;\n  /** Meta tags customizadas */\n  customMeta?: Array<{ name?: string; property?: string; content: string }>;\n  /** Twitter card type */\n  twitterCard?: 'summary' | 'summary_large_image' | 'app' | 'player';\n  /** Twitter handle do site */\n  twitterSite?: string;\n  /** Twitter handle do criador */\n  twitterCreator?: string;\n}\n\n// === COMPONENTE PRINCIPAL ===\nexport const SEOHead: React.FC<SEOProps> = ({\n  title,\n  description,\n  keywords = [],\n  canonical,\n  image,\n  type = 'website',\n  publishedTime,\n  modifiedTime,\n  author,\n  section,\n  tags = [],\n  locale = 'pt_BR',\n  alternateLocales = [],\n  noIndex = false,\n  noFollow = false,\n  structuredData,\n  customMeta = [],\n  twitterCard = 'summary_large_image',\n  twitterSite,\n  twitterCreator,\n}) => {\n  // Construir título completo\n  const fullTitle = title \n    ? `${title} | ${SEO_CONFIG.siteName}`\n    : SEO_CONFIG.defaultTitle;\n\n  // Usar descrição padrão se não fornecida\n  const metaDescription = description || SEO_CONFIG.defaultDescription;\n\n  // Combinar keywords padrão com fornecidas\n  const allKeywords = [...SEO_CONFIG.defaultKeywords, ...keywords];\n\n  // URL canônica\n  const canonicalUrl = canonical || (typeof window !== 'undefined' ? window.location.href : SEO_CONFIG.siteUrl);\n\n  // Imagem para compartilhamento\n  const shareImage = image || SEO_CONFIG.defaultImage;\n  const fullImageUrl = shareImage?.startsWith('http') \n    ? shareImage \n    : `${SEO_CONFIG.siteUrl}${shareImage}`;\n\n  // Robots meta\n  const robotsContent = [\n    noIndex ? 'noindex' : 'index',\n    noFollow ? 'nofollow' : 'follow',\n  ].join(', ');\n\n  // Structured data padrão\n  const defaultStructuredData = {\n    '@context': 'https://schema.org',\n    '@type': type === 'article' ? 'Article' : 'WebPage',\n    name: fullTitle,\n    description: metaDescription,\n    url: canonicalUrl,\n    ...(shareImage && { image: fullImageUrl }),\n    ...(author && {\n      author: {\n        '@type': 'Person',\n        name: author,\n      },\n    }),\n    ...(publishedTime && { datePublished: publishedTime }),\n    ...(modifiedTime && { dateModified: modifiedTime }),\n    ...(type === 'article' && {\n      publisher: {\n        '@type': 'Organization',\n        name: SEO_CONFIG.siteName,\n        logo: {\n          '@type': 'ImageObject',\n          url: `${SEO_CONFIG.siteUrl}${SEO_CONFIG.logo}`,\n        },\n      },\n      mainEntityOfPage: {\n        '@type': 'WebPage',\n        '@id': canonicalUrl,\n      },\n    }),\n  };\n\n  // Combinar structured data\n  const finalStructuredData = structuredData \n    ? { ...defaultStructuredData, ...structuredData }\n    : defaultStructuredData;\n\n  return (\n    <Helmet>\n      {/* Título */}\n      <title>{fullTitle}</title>\n      \n      {/* Meta tags básicas */}\n      <meta name=\"description\" content={metaDescription} />\n      {allKeywords.length > 0 && (\n        <meta name=\"keywords\" content={allKeywords.join(', ')} />\n      )}\n      <meta name=\"robots\" content={robotsContent} />\n      \n      {/* Canonical URL */}\n      <link rel=\"canonical\" href={canonicalUrl} />\n      \n      {/* Idioma */}\n      <meta property=\"og:locale\" content={locale} />\n      {alternateLocales.map(({ locale: altLocale, url }) => (\n        <link key={altLocale} rel=\"alternate\" hrefLang={altLocale} href={url} />\n      ))}\n      \n      {/* Open Graph */}\n      <meta property=\"og:type\" content={type} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:url\" content={canonicalUrl} />\n      <meta property=\"og:site_name\" content={SEO_CONFIG.siteName} />\n      {shareImage && (\n        <>\n          <meta property=\"og:image\" content={fullImageUrl} />\n          <meta property=\"og:image:width\" content=\"1200\" />\n          <meta property=\"og:image:height\" content=\"630\" />\n          <meta property=\"og:image:alt\" content={fullTitle} />\n        </>\n      )}\n      \n      {/* Open Graph - Artigo */}\n      {type === 'article' && (\n        <>\n          {author && <meta property=\"article:author\" content={author} />}\n          {publishedTime && <meta property=\"article:published_time\" content={publishedTime} />}\n          {modifiedTime && <meta property=\"article:modified_time\" content={modifiedTime} />}\n          {section && <meta property=\"article:section\" content={section} />}\n          {tags.map(tag => (\n            <meta key={tag} property=\"article:tag\" content={tag} />\n          ))}\n        </>\n      )}\n      \n      {/* Twitter Cards */}\n      <meta name=\"twitter:card\" content={twitterCard} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {shareImage && <meta name=\"twitter:image\" content={fullImageUrl} />}\n      {twitterSite && <meta name=\"twitter:site\" content={twitterSite} />}\n      {twitterCreator && <meta name=\"twitter:creator\" content={twitterCreator} />}\n      \n      {/* Meta tags customizadas */}\n      {customMeta.map((meta, index) => (\n        <meta\n          key={index}\n          {...(meta.name && { name: meta.name })}\n          {...(meta.property && { property: meta.property })}\n          content={meta.content}\n        />\n      ))}\n      \n      {/* Structured Data */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(finalStructuredData)}\n      </script>\n    </Helmet>\n  );\n};\n\n// === HOOKS DE CONVENIÊNCIA ===\n\n// Hook para SEO de página\nexport const usePageSEO = (seoProps: SEOProps) => {\n  React.useEffect(() => {\n    // Atualizar título da página no navegador\n    if (seoProps.title) {\n      document.title = `${seoProps.title} | ${SEO_CONFIG.siteName}`;\n    }\n    \n    // Atualizar meta description\n    if (seoProps.description) {\n      const metaDesc = document.querySelector('meta[name=\"description\"]');\n      if (metaDesc) {\n        metaDesc.setAttribute('content', seoProps.description);\n      }\n    }\n  }, [seoProps.title, seoProps.description]);\n  \n  return <SEOHead {...seoProps} />;\n};\n\n// Hook para SEO de artigo/blog\nexport const useArticleSEO = ({\n  title,\n  description,\n  author,\n  publishedAt,\n  updatedAt,\n  tags = [],\n  category,\n  image,\n}: {\n  title: string;\n  description: string;\n  author: string;\n  publishedAt: string;\n  updatedAt?: string;\n  tags?: string[];\n  category?: string;\n  image?: string;\n}) => {\n  const seoProps: SEOProps = {\n    title,\n    description,\n    type: 'article',\n    author,\n    publishedTime: publishedAt,\n    modifiedTime: updatedAt,\n    tags,\n    section: category,\n    image,\n    keywords: tags,\n  };\n  \n  return <SEOHead {...seoProps} />;\n};\n\n// Hook para SEO de produto\nexport const useProductSEO = ({\n  name,\n  description,\n  price,\n  currency = 'BRL',\n  availability = 'InStock',\n  brand,\n  category,\n  image,\n  sku,\n}: {\n  name: string;\n  description: string;\n  price: number;\n  currency?: string;\n  availability?: 'InStock' | 'OutOfStock' | 'PreOrder';\n  brand?: string;\n  category?: string;\n  image?: string;\n  sku?: string;\n}) => {\n  const structuredData = {\n    '@type': 'Product',\n    name,\n    description,\n    image,\n    brand: brand ? { '@type': 'Brand', name: brand } : undefined,\n    category,\n    sku,\n    offers: {\n      '@type': 'Offer',\n      price: price.toString(),\n      priceCurrency: currency,\n      availability: `https://schema.org/${availability}`,\n    },\n  };\n  \n  const seoProps: SEOProps = {\n    title: name,\n    description,\n    type: 'website',\n    image,\n    structuredData,\n  };\n  \n  return <SEOHead {...seoProps} />;\n};\n\n// Hook para SEO de pessoa/perfil\nexport const usePersonSEO = ({\n  name,\n  jobTitle,\n  description,\n  image,\n  sameAs = [],\n}: {\n  name: string;\n  jobTitle?: string;\n  description: string;\n  image?: string;\n  sameAs?: string[];\n}) => {\n  const structuredData = {\n    '@type': 'Person',\n    name,\n    jobTitle,\n    description,\n    image,\n    sameAs,\n  };\n  \n  const seoProps: SEOProps = {\n    title: name,\n    description,\n    type: 'profile',\n    image,\n    structuredData,\n  };\n  \n  return <SEOHead {...seoProps} />;\n};\n\n// Hook para SEO de organização\nexport const useOrganizationSEO = ({\n  name,\n  description,\n  logo,\n  url,\n  sameAs = [],\n  address,\n  telephone,\n  email,\n}: {\n  name: string;\n  description: string;\n  logo?: string;\n  url?: string;\n  sameAs?: string[];\n  address?: {\n    streetAddress: string;\n    addressLocality: string;\n    addressRegion: string;\n    postalCode: string;\n    addressCountry: string;\n  };\n  telephone?: string;\n  email?: string;\n}) => {\n  const structuredData = {\n    '@type': 'Organization',\n    name,\n    description,\n    logo,\n    url,\n    sameAs,\n    address: address ? {\n      '@type': 'PostalAddress',\n      ...address,\n    } : undefined,\n    telephone,\n    email,\n  };\n  \n  const seoProps: SEOProps = {\n    title: name,\n    description,\n    type: 'website',\n    image: logo,\n    structuredData,\n  };\n  \n  return <SEOHead {...seoProps} />;\n};\n\nSEOHead.displayName = 'SEOHead';\n\nexport default SEOHead;"