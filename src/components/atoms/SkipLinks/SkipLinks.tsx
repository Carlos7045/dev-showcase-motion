/**
 * SkipLinks - Componente para navegação rápida por teclado
 * Permite pular para seções principais da página
 */

import React from 'react';\nimport { cn } from '@/lib/utils';\n\n// === INTERFACES ===\nexport interface SkipLink {\n  /** ID do elemento de destino */\n  target: string;\n  /** Texto do link */\n  label: string;\n  /** Tecla de atalho (opcional) */\n  shortcut?: string;\n}\n\nexport interface SkipLinksProps {\n  /** Lista de skip links */\n  links: SkipLink[];\n  /** Classes CSS adicionais */\n  className?: string;\n  /** Se deve mostrar teclas de atalho */\n  showShortcuts?: boolean;\n  /** Posição dos skip links */\n  position?: 'top-left' | 'top-center' | 'top-right';\n  /** ID para testes */\n  testId?: string;\n}\n\n// === SKIP LINKS PADRÃO ===\nexport const DEFAULT_SKIP_LINKS: SkipLink[] = [\n  {\n    target: 'main-content',\n    label: 'Conteúdo Principal',\n    shortcut: 'Alt+1',\n  },\n  {\n    target: 'main-navigation',\n    label: 'Menu Principal',\n    shortcut: 'Alt+2',\n  },\n  {\n    target: 'search',\n    label: 'Busca',\n    shortcut: 'Alt+3',\n  },\n  {\n    target: 'footer',\n    label: 'Rodapé',\n    shortcut: 'Alt+4',\n  },\n];\n\n// === COMPONENTE PRINCIPAL ===\nexport const SkipLinks: React.FC<SkipLinksProps> = ({\n  links = DEFAULT_SKIP_LINKS,\n  className,\n  showShortcuts = true,\n  position = 'top-left',\n  testId,\n}) => {\n  // Função para pular para seção\n  const skipToSection = (targetId: string) => {\n    const element = document.getElementById(targetId);\n    \n    if (element) {\n      // Tornar elemento focável temporariamente se necessário\n      const originalTabIndex = element.getAttribute('tabindex');\n      if (!element.hasAttribute('tabindex')) {\n        element.setAttribute('tabindex', '-1');\n      }\n      \n      // Focar e rolar para o elemento\n      element.focus({ preventScroll: false });\n      element.scrollIntoView({ \n        behavior: 'smooth', \n        block: 'start',\n        inline: 'nearest'\n      });\n      \n      // Restaurar tabindex original após um tempo\n      if (!originalTabIndex) {\n        setTimeout(() => {\n          element.removeAttribute('tabindex');\n        }, 100);\n      }\n      \n      // Anunciar para screen readers\n      const announcement = document.createElement('div');\n      announcement.setAttribute('aria-live', 'assertive');\n      announcement.setAttribute('aria-atomic', 'true');\n      announcement.className = 'sr-only';\n      announcement.textContent = `Navegou para ${links.find(link => link.target === targetId)?.label || 'seção'}`;\n      \n      document.body.appendChild(announcement);\n      setTimeout(() => {\n        document.body.removeChild(announcement);\n      }, 1000);\n    } else {\n      console.warn(`SkipLinks: Element with ID '${targetId}' not found`);\n    }\n  };\n\n  // Classes de posicionamento\n  const positionClasses = {\n    'top-left': 'left-4',\n    'top-center': 'left-1/2 -translate-x-1/2',\n    'top-right': 'right-4',\n  };\n\n  // Classes do container\n  const containerClasses = cn(\n    // Posicionamento\n    'fixed top-4 z-50',\n    positionClasses[position],\n    \n    // Comportamento de foco\n    '-translate-y-full opacity-0',\n    'focus-within:translate-y-0 focus-within:opacity-100',\n    \n    // Transições\n    'transition-all duration-200 ease-in-out',\n    \n    // Estilo visual\n    'bg-background border border-border rounded-lg shadow-lg',\n    'p-2 space-y-1',\n    \n    className\n  );\n\n  return (\n    <nav\n      className={containerClasses}\n      aria-label=\"Links de navegação rápida\"\n      data-testid={testId}\n    >\n      <div className=\"text-xs font-medium text-muted-foreground px-2 py-1\">\n        Navegação Rápida\n      </div>\n      \n      {links.map(({ target, label, shortcut }) => (\n        <button\n          key={target}\n          onClick={() => skipToSection(target)}\n          className={cn(\n            // Layout\n            'flex items-center justify-between w-full',\n            'px-3 py-2 text-sm',\n            \n            // Estilo visual\n            'text-foreground bg-transparent',\n            'border border-transparent rounded-md',\n            \n            // Estados de interação\n            'hover:bg-accent hover:text-accent-foreground',\n            'focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n            'active:bg-accent/80',\n            \n            // Transições\n            'transition-colors duration-150'\n          )}\n          type=\"button\"\n          data-testid={testId ? `${testId}-${target}` : undefined}\n        >\n          <span className=\"font-medium\">{label}</span>\n          \n          {showShortcuts && shortcut && (\n            <kbd className=\"ml-2 px-1.5 py-0.5 text-xs font-mono bg-muted text-muted-foreground rounded border\">\n              {shortcut}\n            </kbd>\n          )}\n        </button>\n      ))}\n      \n      <div className=\"text-xs text-muted-foreground px-2 py-1 border-t border-border mt-2 pt-2\">\n        Pressione Tab para navegar\n      </div>\n    </nav>\n  );\n};\n\n// === HOOK PARA GERENCIAR SKIP LINKS ===\nexport const useSkipLinks = () => {\n  const [customLinks, setCustomLinks] = React.useState<SkipLink[]>([]);\n  \n  // Adicionar skip link customizado\n  const addSkipLink = React.useCallback((link: SkipLink) => {\n    setCustomLinks(prev => {\n      const exists = prev.some(l => l.target === link.target);\n      if (exists) return prev;\n      return [...prev, link];\n    });\n  }, []);\n  \n  // Remover skip link\n  const removeSkipLink = React.useCallback((target: string) => {\n    setCustomLinks(prev => prev.filter(l => l.target !== target));\n  }, []);\n  \n  // Limpar todos os skip links customizados\n  const clearSkipLinks = React.useCallback(() => {\n    setCustomLinks([]);\n  }, []);\n  \n  // Combinar links padrão com customizados\n  const allLinks = React.useMemo(() => {\n    return [...DEFAULT_SKIP_LINKS, ...customLinks];\n  }, [customLinks]);\n  \n  return {\n    links: allLinks,\n    addSkipLink,\n    removeSkipLink,\n    clearSkipLinks,\n  };\n};\n\n// === COMPONENTE DE CONVENIÊNCIA ===\nexport const SkipLinksProvider: React.FC<{\n  children: React.ReactNode;\n  skipLinksProps?: Partial<SkipLinksProps>;\n}> = ({ children, skipLinksProps = {} }) => {\n  const { links } = useSkipLinks();\n  \n  return (\n    <>\n      <SkipLinks links={links} {...skipLinksProps} />\n      {children}\n    </>\n  );\n};\n\n// === HOOK PARA ATALHOS DE TECLADO ===\nexport const useSkipLinksShortcuts = (links: SkipLink[] = DEFAULT_SKIP_LINKS) => {\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Verificar se é um atalho de skip link\n      const matchingLink = links.find(link => {\n        if (!link.shortcut) return false;\n        \n        const shortcut = link.shortcut.toLowerCase();\n        const isAltPressed = event.altKey;\n        const key = event.key;\n        \n        // Formato: Alt+1, Alt+2, etc.\n        if (shortcut.includes('alt+')) {\n          const shortcutKey = shortcut.replace('alt+', '');\n          return isAltPressed && key === shortcutKey;\n        }\n        \n        return false;\n      });\n      \n      if (matchingLink) {\n        event.preventDefault();\n        const element = document.getElementById(matchingLink.target);\n        \n        if (element) {\n          element.focus();\n          element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [links]);\n};\n\n// === COMPONENTE PARA MARCAR SEÇÕES ===\nexport const SkipTarget: React.FC<{\n  id: string;\n  children: React.ReactNode;\n  className?: string;\n  as?: keyof JSX.IntrinsicElements;\n}> = ({ id, children, className, as: Component = 'div' }) => {\n  return (\n    <Component\n      id={id}\n      className={cn('skip-target', className)}\n      tabIndex={-1}\n    >\n      {children}\n    </Component>\n  );\n};\n\nSkipLinks.displayName = 'SkipLinks';\nSkipLinksProvider.displayName = 'SkipLinksProvider';\nSkipTarget.displayName = 'SkipTarget';\n\nexport default SkipLinks;"