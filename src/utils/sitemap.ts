/**\n * Sitemap - Utilitários para geração de sitemap dinâmico\n * Geração automática de sitemap.xml para SEO\n */\n\nimport { SEO_CONFIG } from '@/config/seo';\n\n// === INTERFACES ===\nexport interface SitemapUrl {\n  /** URL da página */\n  loc: string;\n  /** Data da última modificação */\n  lastmod?: string;\n  /** Frequência de mudança */\n  changefreq?: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';\n  /** Prioridade (0.0 - 1.0) */\n  priority?: number;\n  /** URLs de imagens na página */\n  images?: Array<{\n    loc: string;\n    caption?: string;\n    title?: string;\n  }>;\n  /** URLs alternativas para outros idiomas */\n  alternates?: Array<{\n    hreflang: string;\n    href: string;\n  }>;\n}\n\nexport interface SitemapOptions {\n  /** URL base do site */\n  baseUrl?: string;\n  /** Se deve incluir imagens */\n  includeImages?: boolean;\n  /** Se deve incluir alternativas de idioma */\n  includeAlternates?: boolean;\n  /** Filtro para URLs */\n  urlFilter?: (url: SitemapUrl) => boolean;\n  /** Transformação de URLs */\n  urlTransform?: (url: SitemapUrl) => SitemapUrl;\n}\n\n// === GERADOR DE SITEMAP ===\nexport class SitemapGenerator {\n  private urls: SitemapUrl[] = [];\n  private options: SitemapOptions;\n\n  constructor(options: SitemapOptions = {}) {\n    this.options = {\n      baseUrl: SEO_CONFIG.siteUrl,\n      includeImages: true,\n      includeAlternates: true,\n      ...options,\n    };\n  }\n\n  // Adicionar URL\n  addUrl(url: SitemapUrl): this {\n    // Normalizar URL\n    const normalizedUrl = {\n      ...url,\n      loc: this.normalizeUrl(url.loc),\n      lastmod: url.lastmod || new Date().toISOString().split('T')[0],\n      changefreq: url.changefreq || 'weekly',\n      priority: url.priority || 0.5,\n    };\n\n    // Aplicar filtro\n    if (this.options.urlFilter && !this.options.urlFilter(normalizedUrl)) {\n      return this;\n    }\n\n    // Aplicar transformação\n    const finalUrl = this.options.urlTransform \n      ? this.options.urlTransform(normalizedUrl)\n      : normalizedUrl;\n\n    this.urls.push(finalUrl);\n    return this;\n  }\n\n  // Adicionar múltiplas URLs\n  addUrls(urls: SitemapUrl[]): this {\n    urls.forEach(url => this.addUrl(url));\n    return this;\n  }\n\n  // Adicionar páginas estáticas\n  addStaticPages(pages: Array<{\n    path: string;\n    priority?: number;\n    changefreq?: SitemapUrl['changefreq'];\n  }>): this {\n    pages.forEach(({ path, priority, changefreq }) => {\n      this.addUrl({\n        loc: path,\n        priority,\n        changefreq,\n      });\n    });\n    return this;\n  }\n\n  // Adicionar posts de blog\n  addBlogPosts(posts: Array<{\n    slug: string;\n    publishedAt: string;\n    updatedAt?: string;\n    images?: string[];\n  }>): this {\n    posts.forEach(({ slug, publishedAt, updatedAt, images }) => {\n      this.addUrl({\n        loc: `/blog/${slug}`,\n        lastmod: updatedAt || publishedAt,\n        changefreq: 'monthly',\n        priority: 0.7,\n        images: images?.map(img => ({\n          loc: this.normalizeUrl(img),\n        })),\n      });\n    });\n    return this;\n  }\n\n  // Adicionar produtos\n  addProducts(products: Array<{\n    slug: string;\n    updatedAt?: string;\n    images?: string[];\n    category?: string;\n  }>): this {\n    products.forEach(({ slug, updatedAt, images, category }) => {\n      this.addUrl({\n        loc: category ? `/produtos/${category}/${slug}` : `/produtos/${slug}`,\n        lastmod: updatedAt,\n        changefreq: 'weekly',\n        priority: 0.8,\n        images: images?.map(img => ({\n          loc: this.normalizeUrl(img),\n        })),\n      });\n    });\n    return this;\n  }\n\n  // Normalizar URL\n  private normalizeUrl(url: string): string {\n    if (url.startsWith('http')) {\n      return url;\n    }\n    \n    const baseUrl = this.options.baseUrl || SEO_CONFIG.siteUrl;\n    return `${baseUrl.replace(/\\/$/, '')}${url.startsWith('/') ? url : `/${url}`}`;\n  }\n\n  // Gerar XML do sitemap\n  generateXML(): string {\n    const urls = this.urls.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    xml += '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"';\n    \n    if (this.options.includeImages) {\n      xml += ' xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"';\n    }\n    \n    if (this.options.includeAlternates) {\n      xml += ' xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"';\n    }\n    \n    xml += '>\\n';\n\n    urls.forEach(url => {\n      xml += '  <url>\\n';\n      xml += `    <loc>${this.escapeXml(url.loc)}</loc>\\n`;\n      \n      if (url.lastmod) {\n        xml += `    <lastmod>${url.lastmod}</lastmod>\\n`;\n      }\n      \n      if (url.changefreq) {\n        xml += `    <changefreq>${url.changefreq}</changefreq>\\n`;\n      }\n      \n      if (url.priority !== undefined) {\n        xml += `    <priority>${url.priority.toFixed(1)}</priority>\\n`;\n      }\n\n      // Imagens\n      if (this.options.includeImages && url.images) {\n        url.images.forEach(image => {\n          xml += '    <image:image>\\n';\n          xml += `      <image:loc>${this.escapeXml(image.loc)}</image:loc>\\n`;\n          \n          if (image.caption) {\n            xml += `      <image:caption>${this.escapeXml(image.caption)}</image:caption>\\n`;\n          }\n          \n          if (image.title) {\n            xml += `      <image:title>${this.escapeXml(image.title)}</image:title>\\n`;\n          }\n          \n          xml += '    </image:image>\\n';\n        });\n      }\n\n      // Alternativas de idioma\n      if (this.options.includeAlternates && url.alternates) {\n        url.alternates.forEach(alternate => {\n          xml += `    <xhtml:link rel=\"alternate\" hreflang=\"${alternate.hreflang}\" href=\"${this.escapeXml(alternate.href)}\" />\\n`;\n        });\n      }\n\n      xml += '  </url>\\n';\n    });\n\n    xml += '</urlset>';\n    return xml;\n  }\n\n  // Gerar JSON do sitemap (para APIs)\n  generateJSON(): {\n    urls: SitemapUrl[];\n    totalUrls: number;\n    lastGenerated: string;\n  } {\n    return {\n      urls: this.urls,\n      totalUrls: this.urls.length,\n      lastGenerated: new Date().toISOString(),\n    };\n  }\n\n  // Escapar XML\n  private escapeXml(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n  }\n\n  // Limpar URLs\n  clear(): this {\n    this.urls = [];\n    return this;\n  }\n\n  // Obter estatísticas\n  getStats(): {\n    totalUrls: number;\n    byPriority: Record<string, number>;\n    byChangefreq: Record<string, number>;\n  } {\n    const byPriority: Record<string, number> = {};\n    const byChangefreq: Record<string, number> = {};\n\n    this.urls.forEach(url => {\n      const priority = (url.priority || 0.5).toFixed(1);\n      const changefreq = url.changefreq || 'weekly';\n\n      byPriority[priority] = (byPriority[priority] || 0) + 1;\n      byChangefreq[changefreq] = (byChangefreq[changefreq] || 0) + 1;\n    });\n\n    return {\n      totalUrls: this.urls.length,\n      byPriority,\n      byChangefreq,\n    };\n  }\n}\n\n// === FUNÇÕES DE CONVENIÊNCIA ===\n\n// Gerar sitemap básico\nexport const generateBasicSitemap = (options: SitemapOptions = {}): string => {\n  const generator = new SitemapGenerator(options);\n  \n  // Páginas estáticas básicas\n  generator.addStaticPages([\n    { path: '/', priority: 1.0, changefreq: 'daily' },\n    { path: '/sobre', priority: 0.8, changefreq: 'monthly' },\n    { path: '/contato', priority: 0.7, changefreq: 'monthly' },\n    { path: '/blog', priority: 0.9, changefreq: 'weekly' },\n    { path: '/projetos', priority: 0.8, changefreq: 'weekly' },\n  ]);\n  \n  return generator.generateXML();\n};\n\n// Gerar sitemap para blog\nexport const generateBlogSitemap = (\n  posts: Array<{\n    slug: string;\n    publishedAt: string;\n    updatedAt?: string;\n    images?: string[];\n  }>,\n  options: SitemapOptions = {}\n): string => {\n  const generator = new SitemapGenerator(options);\n  generator.addBlogPosts(posts);\n  return generator.generateXML();\n};\n\n// Gerar sitemap para produtos\nexport const generateProductSitemap = (\n  products: Array<{\n    slug: string;\n    updatedAt?: string;\n    images?: string[];\n    category?: string;\n  }>,\n  options: SitemapOptions = {}\n): string => {\n  const generator = new SitemapGenerator(options);\n  generator.addProducts(products);\n  return generator.generateXML();\n};\n\n// Validar sitemap\nexport const validateSitemap = (xml: string): {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n} => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Verificações básicas\n  if (!xml.includes('<?xml version=\"1.0\"')) {\n    errors.push('Missing XML declaration');\n  }\n\n  if (!xml.includes('<urlset')) {\n    errors.push('Missing urlset element');\n  }\n\n  if (!xml.includes('xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"')) {\n    errors.push('Missing sitemap namespace');\n  }\n\n  // Contar URLs\n  const urlMatches = xml.match(/<url>/g);\n  const urlCount = urlMatches ? urlMatches.length : 0;\n\n  if (urlCount === 0) {\n    warnings.push('No URLs found in sitemap');\n  }\n\n  if (urlCount > 50000) {\n    warnings.push('Sitemap contains more than 50,000 URLs (consider splitting)');\n  }\n\n  // Verificar tamanho\n  const sizeInBytes = new Blob([xml]).size;\n  if (sizeInBytes > 50 * 1024 * 1024) { // 50MB\n    warnings.push('Sitemap is larger than 50MB (consider splitting)');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n// Gerar robots.txt\nexport const generateRobotsTxt = ({\n  sitemapUrl,\n  disallowPaths = [],\n  allowPaths = [],\n  crawlDelay,\n}: {\n  sitemapUrl?: string;\n  disallowPaths?: string[];\n  allowPaths?: string[];\n  crawlDelay?: number;\n} = {}): string => {\n  let robotsTxt = 'User-agent: *\\n';\n  \n  // Allow paths\n  allowPaths.forEach(path => {\n    robotsTxt += `Allow: ${path}\\n`;\n  });\n  \n  // Disallow paths\n  disallowPaths.forEach(path => {\n    robotsTxt += `Disallow: ${path}\\n`;\n  });\n  \n  // Crawl delay\n  if (crawlDelay) {\n    robotsTxt += `Crawl-delay: ${crawlDelay}\\n`;\n  }\n  \n  // Sitemap\n  if (sitemapUrl) {\n    robotsTxt += `\\nSitemap: ${sitemapUrl}`;\n  }\n  \n  return robotsTxt;\n};\n\n// === TIPOS EXPORTADOS ===\nexport type { SitemapUrl, SitemapOptions };"